- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable specific version
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: Install python mysql dependencies
  ansible.builtin.pip:
    name:
      - PyMySQL
      - cryptography
    executable: pip3.9

- name: Install packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: installed
  loop:
    - nodejs
    - mysql

- name: Create a user expense
  ansible.builtin.user:
    name: expense

- name: remove a directory
  ansible.builtin.file:
    path: /app
    state: absent

- name: Make a directory
  ansible.builtin.file:
    path: /app
    state: directory

- name: download backend code
  ansible.builtin.get_url:
    url: https://expense-artifacts.s3.amazonaws.com/expense-backend-v2.zip
    dest: /tmp/backend.zip


- name: Unarchive a backend code that is already on the remote machine
  ansible.builtin.unarchive:
    src: /tmp/backend.zip
    dest: /app
    remote_src: yes

- name: install npm
  ansible.builtin.command: npm install -y
  args:
    chdir: /app

- name: copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: import data into mysql
  community.mysql.mysql_db:
    login_user: "{{ login_user }}"
    login_password: "{{ mysql_connection_pass }}"
    login_host: "{{ mysql_login_hosts }}"
    state: import
    name: all
    target: /app/schema/backend.sql

- name: update backend service
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable service
  ansible.builtin.service:
    name: backend
    state: started
    enabled: yes
